package CFDI;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class CadenaOriginalGen {

	public static void main(String[] args) throws TransformerException, IOException, NoSuchAlgorithmException {

		String _doc="FAC-AMMTY18-000002";

		// cargar el archivo XSLT
		File xslt = new File("E:/conector_qr/data/RAM0603016C6/cadenaoriginal_3_3.xslt/cadenaoriginal_3_3.xslt");
		StreamSource sourceXSL = new StreamSource(xslt);

		// cargar el CFDI
		File cfdi = new File("E:/conector_qr/data/RAM0603016C6/02_xmls_sin_firma/RAM0603016C6-FAC-AMMTY18-000002.xml");
		StreamSource sourceXML = new StreamSource(cfdi);

		// crear el procesador XSLT que nos ayudará a generar la cadena original
		// con base en las reglas del archivo XSLT
		TransformerFactory tFactory = TransformerFactory.newInstance();
		Transformer transformer = tFactory.newTransformer(sourceXSL);

		String _cadena="";

		// aplicar las reglas del XSLT con los datos del CFDI y escribir el resultado en output
		StringWriter outWriter = new StringWriter();
		transformer.transform(sourceXML, new StreamResult(outWriter));
		StringBuffer sb = outWriter.getBuffer(); 
		_cadena = sb.toString();

		// E:\conector_qr\data\RAM0603016C6\23_cadena_original
		File archivo_cadena=new File("E:/conector_qr/data/RAM0603016C6/23_cadena_original/FAC-AMMTY18-000002.txt");
		archivo_cadena.delete();
		FileWriter chanel_write=new FileWriter(archivo_cadena,true);
		chanel_write.write(_cadena);
		chanel_write.close();

		System.out.println("Cadena Original: "+_cadena);

		String _sha1="";
		_sha1=sha1(_cadena);
		File archivo_sha1=new File("E:/conector_qr/data/RAM0603016C6/24_sha1/FAC-AMMTY18-000002.txt");
		archivo_sha1.delete();
		FileWriter chanel_write_sha1=new FileWriter(archivo_sha1,true);
		chanel_write_sha1.write(_sha1);
		chanel_write_sha1.close();

		
		
		System.out.println("SHA1           : "+_sha1);



	}






	static String sha1(String input) throws NoSuchAlgorithmException {
		MessageDigest mDigest = MessageDigest.getInstance("SHA1");
		byte[] result = mDigest.digest(input.getBytes());
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < result.length; i++) {
			sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));
		}

		return sb.toString();
	}

}