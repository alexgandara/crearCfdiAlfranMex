package CFDI;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.Signature;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;















import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dsig.dom.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.ssl.PKCS8Key;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

import Decoder.BASE64Encoder;



public class Firma_Documento {
	
	// RUTAS Y ARCHIVOS
		public static String $PATH_ARCHIVOS_PLANOS="";
		public static String $PATH_SIN_FIRMA="";
		public static String $PATH_CON_FIRMA="";
		public static String $FILE_NAME_XML="";
		public static String $PATH_RESPUESTAS="";
		public static String $PATH_PDFS="";
		public static String $PATH_TICKETS="";
		public static String $PATH_RESPUESTAS_STATUS="";
		public static String $PATH_CERTIFICADOS="";
		
		// DATOS DEL EMISOR
		public static String $RUC="";
		public static String $RAZON_SOCIAL="";
		public static String $CODIGO_POSTAL="";
		public static String $DIRECCION="";
		public static String $CIUDAD="";
		public static String $PAIS="";
		
		// DATOS DE LA LLAVE
		public static String $KEYSTORE="";
		public static String $PASSWORD_KEYSTORE="";
		public static String $PASSWORD_CERTIFICADO="";
		public static String $ALIAS_CERTIFICADO="";
		

	public static void firmar(String $PATH_XMLS_SIN_FIRMA, String $PATH_XMLS_CON_FIRMA, String $FILE_NAME, parametros misParametros) throws GeneralSecurityException, IOException, TransformerException {
		
		
		$PATH_ARCHIVOS_PLANOS=misParametros.get_ruta_base();
		$PATH_SIN_FIRMA=misParametros.get_ruta_xml_sin_firma();
		$PATH_CON_FIRMA=misParametros.get_ruta_xml_con_firma();
		$PATH_RESPUESTAS=misParametros.get_ruta_respuestas_status();
		$PATH_PDFS=misParametros.get_ruta_pdfs();
		$PATH_TICKETS=misParametros.get_ruta_tickets();
		$PATH_RESPUESTAS_STATUS=misParametros.get_ruta_respuestas_status();
		$PATH_CERTIFICADOS=misParametros.get_ruta_certificados();
		
		$RUC=misParametros.get_ruc();
		$RAZON_SOCIAL=misParametros.get_razon_social();
		$CODIGO_POSTAL=misParametros.get_codigo_postal();
		$DIRECCION=misParametros.get_direccion();
		$CIUDAD=misParametros.get_ciudad();
		$PAIS=misParametros.get_pais();
		
		$KEYSTORE=misParametros.get_keystore();
		$PASSWORD_KEYSTORE=misParametros.get_password_keystore();
		$PASSWORD_CERTIFICADO=misParametros.get_password_certificado();
		$ALIAS_CERTIFICADO=misParametros.get_alias_certificado();
		
		
		
		String _doc="FAC-AMMTY18-000002";

		// elavoracion de cadena original
		
		// cargar el archivo XSLT
		File xslt = new File("C:/fg/conector_qr/data/RAM0603016C6/cadenaoriginal_3_3.xslt/cadenaoriginal_3_3.xslt");
		StreamSource sourceXSL = new StreamSource(xslt);
		
		// cargar el CFDI
	//	File cfdi = new File("E:/conector_qr/data/RAM0603016C6/02_xmls_sin_firma/RAM0603016C6-FAC-AMMTY18-000002.xml");
		 File cfdi = new File($PATH_XMLS_SIN_FIRMA+$FILE_NAME+".xml");
		System.out.println("Archivo Xml    "+cfdi.toString());
		StreamSource sourceXML = new StreamSource(cfdi);

		TransformerFactory tFactory = TransformerFactory.newInstance();
		Transformer transformer = null;
		try {
			transformer = tFactory.newTransformer(sourceXSL);
		} catch (TransformerConfigurationException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		
		String cadenaOriginal="";

		// aplicar las reglas del XSLT con los datos del CFDI y escribir el resultado en output
		StringWriter outWriter = new StringWriter();
		try {
			transformer.transform(sourceXML, new StreamResult(outWriter));
		} catch (TransformerException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		StringBuffer sb = outWriter.getBuffer(); 
		cadenaOriginal = sb.toString();
		
		System.out.println("Cadena Original: "+cadenaOriginal);
		
		System.out.println("Password Certif: "+$PASSWORD_CERTIFICADO);
		String password=$PASSWORD_CERTIFICADO;
		
		
		
		PKCS8Key pkcs8 = null;

		FileInputStream clavePrivada = null;
		FileInputStream clavePublica = null;
		Signature firma = null;
		
		
		clavePrivada = new FileInputStream( "C:/fg/conector_qr/data/RAM0603016C6/certificados/LlavePkcs8PF.key.pem" );
		clavePublica = new FileInputStream( "C:/fg/conector_qr/data/RAM0603016C6/certificados/CertificadoFirmadoPF.cer.pem" );
		
		String _clavePublica="";
		
		_clavePublica = getFileContent(clavePublica);
		
		
		
		int position =  _clavePublica.indexOf("-----BEGIN CERTIFICATE-----")+27;
		int largo = _clavePublica.length()-25;
		
		String _certificado64=_clavePublica.substring(position, largo);
	//	System.out.println("Certificado: "+_certificado64);
		
		
		
		
		pkcs8 = new PKCS8Key(clavePrivada, password.toCharArray());
		java.security.PrivateKey pk = pkcs8.getPrivateKey();
		firma = Signature.getInstance("MD5withRSA");
		firma.initSign(pk);
		
		firma.update(cadenaOriginal.getBytes("UTF-8"));
//		byte[] cadenaFirmada = firma.sign();
		String selloDigital="";
		BASE64Encoder b64 = new BASE64Encoder(); 
		selloDigital = b64.encode(firma.sign());
		System.out.println("Sello Digital:" + selloDigital);
		
		
		// Instantiate the document to be signed.
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		dbf.setNamespaceAware(true);
		try {
			Document doc = dbf.newDocumentBuilder().parse
			   (new FileInputStream($PATH_XMLS_SIN_FIRMA+$FILE_NAME+".xml"));
			
			Element element = (Element) doc.getElementsByTagName("cfdi:Comprobante").item(0);
			element.setAttribute("Sello",selloDigital );
			element.setAttribute("Certificado",_certificado64);

			
			
			OutputStream os = new FileOutputStream($PATH_XMLS_CON_FIRMA+$FILE_NAME+".xml");
			TransformerFactory tf = TransformerFactory.newInstance();
			Transformer trans = null;
			try {
				trans = tf.newTransformer();
			} catch (TransformerConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			doc.setXmlStandalone(true);
			trans.transform(new DOMSource(doc), new StreamResult(os));
			
		//	comprimirXML.comprimir($PATH_XMLS_CON_FIRMA+$FILE_NAME+".zip",$PATH_XMLS_CON_FIRMA+$FILE_NAME+".xml",$FILE_NAME+".xml");
			
			System.out.println("El Archivo "+$FILE_NAME+" fue creado y firmado!");
			
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
		
		
		///Node content = doc.getElementsByTagName("ext:UBLExtensions").item(0);
		
		
		 
		
		
		
		
		
		
	}
	
	
	public static String getFileContent(
			   FileInputStream fis
			    ) throws IOException
			 {
			   try( BufferedReader br =
			           new BufferedReader( new InputStreamReader(fis )))
			   {
			      StringBuilder sb = new StringBuilder();
			      String line;
			      while(( line = br.readLine()) != null ) {
			         sb.append( line );
			        // sb.append( '\n' );
			      }
			      return sb.toString();
			   }
			}

}